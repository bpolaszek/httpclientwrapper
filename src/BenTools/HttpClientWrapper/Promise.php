<?php
/**
 * Promise.php
 * Generated by PhpStorm - 11/2015
 *
 * @author Beno!t POLASZEK
 **/

namespace BenTools\HttpClientWrapper;

use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Promise\PromiseInterface;
use Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\HttpFoundation\Request;

class Promise {

    const NO_CACHE = -1;

    /**
     * @var HttpClientWrapper
     */
    protected $httpWrapper;

    /**
     * @var Request
     */
    protected $request;

    /**
     * @var string
     */
    protected $requestId;

    /**
     * @var EventDispatcherInterface
     */
    protected $eventDispatcher;

    /**
     * @var HttpFoundationFactory
     */
    protected $httpFoundationFactory;

    /**
     * Promise constructor.
     * @param PromiseInterface $promise
     * @param Request $request
     * @param string $requestId
     * @param EventDispatcherInterface $eventDispatcher
     */
    public function __construct(HttpClientWrapper $wrapper, Request $request, $requestId, EventDispatcherInterface $eventDispatcher) {
        $this->httpWrapper     = $wrapper;
        $this->request         = $request;
        $this->requestId       = $requestId;
        $this->eventDispatcher = $eventDispatcher;
    }

    /**
     * @param callable|null $before
     * @return $this
     */
    public function before(callable $before = null) {
        if (is_callable($before))
            $this->eventDispatcher->addListener(sprintf('%s.BEFORE', $this->getRequestId()), $before);
        return $this;
    }

    /**
     * @param callable|null $onFulfill
     * @param callable|null $onReject
     * @return $this
     */
    public function then(callable $onFulfill = null, callable $onReject = null) {
        $this->onFulfill($onFulfill);
        $this->onReject($onReject);
        return $this;
    }

    /**
     * @param callable|null $onFulfill
     * @param int $priority
     * @return $this
     */
    public function onFulfill(callable $onFulfill = null, $priority = 0) {
        if (is_callable($onFulfill))
            $this->eventDispatcher->addListener(sprintf('%s.SUCCESS', $this->getRequestId()), $onFulfill, $priority);
        return $this;
    }

    /**
     * @param callable|null $onReject
     * @param int $priority
     * @return $this
     */
    public function onReject(callable $onReject = null, $priority = 0) {
        if (is_callable($onReject))
            $this->eventDispatcher->addListener(sprintf('%s.ERROR', $this->getRequestId()), $onReject, $priority);
        return $this;
    }

    /**
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function wait() {
        try {

            $event        = $this->eventDispatcher->dispatch(sprintf('%s.BEFORE', $this->getRequestId()), new RequestEvent($this));

            if ($event->getResponse()) {
                $response = $event->getResponse();
            }

            else {
                $psr7Response = $this->httpWrapper->getClient()->send($this->httpWrapper->fromHttpFoundationToPSR7($this->getRequest()));
                $response     = $this->httpWrapper->getHttpFoundationFactory()->createResponse($psr7Response);
            }

            $this->eventDispatcher->dispatch(sprintf('%s.SUCCESS', $this->getRequestId()), new RequestEvent($this, $response));
        }
        catch (BadResponseException $exception) {
            $psr7Response = $exception->getResponse();
            $response     = $this->httpWrapper->getHttpFoundationFactory()->createResponse($psr7Response);
            $this->eventDispatcher->dispatch(sprintf('%s.ERROR', $this->getRequestId()), new RequestEvent($this, $response, $exception));
        }
        $this->httpWrapper->removePromise($this->getRequestId());
        return $response;
    }

    /**
     * @return string
     */
    public function getRequestId() {
        return $this->requestId;
    }

    /**
     * @param string $requestId
     * @return $this - Provides Fluent Interface
     */
    public function setRequestId($requestId) {
        $this->requestId = $requestId;
        return $this;
    }

    /**
     * @return Request
     */
    public function getRequest() {
        return $this->request;
    }

    /**
     * @param Request $request
     * @return $this - Provides Fluent Interface
     */
    public function setRequest($request) {
        $this->request = $request;
        return $this;
    }

    /**
     * @return HttpClientWrapper
     */
    public function getHttpWrapper() {
        return $this->httpWrapper;
    }

    /**
     * @param HttpClientWrapper $httpWrapper
     * @return $this - Provides Fluent Interface
     */
    public function setHttpWrapper($httpWrapper) {
        $this->httpWrapper = $httpWrapper;
        return $this;
    }

    /**
     * @return EventDispatcherInterface
     */
    public function getEventDispatcher() {
        return $this->eventDispatcher;
    }
}