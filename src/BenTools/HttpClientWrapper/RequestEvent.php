<?php
/**
 * RequestEvent.php
 * Generated by PhpStorm - 11/2015
 *
 * @author Beno!t POLASZEK
 **/

namespace BenTools\HttpClientWrapper;

use Exception;
use Symfony\Component\EventDispatcher\Event;
use Symfony\Component\HttpFoundation\Response;

class RequestEvent extends Event {

    /**
     * @var Promise
     */
    protected $promise;

    /**
     * @var Response
     */
    protected $response;

    /**
     * @var mixed
     */
    protected $data;

    /**
     * @var Exception
     */
    protected $exception;

    /**
     * RequestEvent constructor.
     * @param Promise $promise
     * @param Response|null $response
     * @param Exception|null $exception
     */
    public function __construct(Promise $promise, Response $response = null, Exception $exception = null) {
        $this->promise   = $promise;
        $this->response  = $response;
        $this->exception = $exception;
    }

    /**
     * @return Response
     */
    public function getResponse() {
        return $this->response;
    }

    /**
     * @param Response $response
     * @return $this - Provides Fluent Interface
     */
    public function setResponse($response) {
        $this->response = $response;
        return $this;
    }

    /**
     * @return Promise
     */
    public function getPromise() {
        return $this->promise;
    }

    /**
     * @param Promise $promise
     * @return $this - Provides Fluent Interface
     */
    public function setPromise($promise) {
        $this->promise = $promise;
        return $this;
    }

    /**
     * @return \Symfony\Component\HttpFoundation\Request
     */
    public function getRequest() {
        return $this->getPromise()->getRequest();
    }

    /**
     * @return string
     */
    public function getRequestId() {
        return $this->getPromise()->getRequestId();
    }

    /**
     * @return Exception
     */
    public function getException() {
        return $this->exception;
    }

    /**
     * @return bool
     */
    public function hasException() {
        return (bool) $this->exception;
    }

    /**
     * @param Exception $exception
     * @return $this - Provides Fluent Interface
     */
    public function setException($exception) {
        $this->exception = $exception;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getData() {
        return $this->data;
    }

    /**
     * @param mixed $data
     * @return $this - Provides Fluent Interface
     */
    public function setData($data) {
        $this->data = $data;
        return $this;
    }

}